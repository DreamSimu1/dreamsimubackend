// // //   const { subject } = req.body;

// // //   if (!subject) {
// // //     return res.status(400).json({ error: "Subject is required" });
// // //   }

// // //   const messages = [
// // //     {
// // //       role: "user",

// // //       content: `Generate a list of 30 concise topics for the subject "${subject}" that are brief (1–2 words) and suitable for standard curriculum discussions. Do not include explanations or long descriptions—just the topic names.`,
// // //     },
// // //   ];

// // //   try {
// // //     const response = await callOpenAI(messages, 300, 0.7);

// // //     const topics = response.split("\n").filter((topic) => topic.trim() !== ""); // Clean up the topics

// // //     res.status(200).json({ topics });
// // //   } catch (error) {
// // //     console.error("Error generating topics:", error);
// // //     res.status(500).json({ error: "Failed to generate topics" });
// // //   }
// // // };

// // // export const generateFieldTopic = async (req, res) => {
// // //   const { field } = req.body; // Accept the field

// // //   if (!field) {
// // //     return res.status(400).json({ error: "Field is required" }); // Error if no field provided
// // //   }

// // //   const messages = [
// // //     {
// // //       role: "user",
// // //       content: `Generate a list of 40 concise, general topics for the field "${field}". Each topic should be 1-2 words long and should cover broad concepts in that field, not specific technologies or terms. For example, in the tech field, generate topics like 'Software Development', 'Cloud Computing', 'Artificial Intelligence', etc., instead of individual programming languages or tools.`,
// // //     },
// // //   ];

// // //   try {
// // //     const response = await callOpenAI(messages, 300, 0.7);

// // //     const topics = response.split("\n").filter((topic) => topic.trim() !== ""); // Clean up the topics

// // //     res.status(200).json({ topics });
// // //   } catch (error) {
// // //     console.error("Error generating topics:", error);
// // //     res.status(500).json({ error: "Failed to generate topics" });
// // //   }
// // // };

// // // // Generate and save fields
// // // export const generateAllFields = async (req, res) => {
// // //   try {
// // //     // Generate fields using the OpenAI service
// // //     const fields = await generateFieldsFromOpenAI();

// // //     if (!fields || fields.length === 0) {
// // //       return res
// // //         .status(400)
// // //         .json({ message: "No fields generated by OpenAI." });
// // //     }

// // //     // Save each field to the database
// // //     const savedFields = await Promise.all(
// // //       fields.map((field) =>
// // //         GenerateField.create({
// // //           type: "field",
// // //           content: field, // Save the field content
// // //           createdBy: req.user ? req.user._id : null, // Optional user association
// // //         })
// // //       )
// // //     );

// // //     res.status(201).json({
// // //       message: "Fields generated and saved successfully",
// // //       data: savedFields,
// // //     });
// // //   } catch (error) {
// // //     console.error("Error generating fields:", error.message);
// // //     res
// // //       .status(500)
// // //       .json({ message: "Error generating fields", error: error.message });
// // //   }
// // // };

// // // // Retrieve all saved fields
// // // export const getAllSavedFields = async (req, res) => {
// // //   try {
// // //     const fields = await GenerateField.find({ type: "field" }); // Fetch fields
// // //     res.status(200).json({
// // //       message: "Fields retrieved successfully",
// // //       data: fields,
// // //     });
// // //   } catch (error) {
// // //     res.status(500).json({
// // //       message: "Error retrieving fields",
// // //       error: error.message,
// // //     });
// // //   }
// // // };

// // // export const generateGeneralQuestion = async (req, res) => {
// // //   const {
// // //     fullname,
// // //     email,
// // //     topic,
// // //     difficulty,
// // //     numberOfQuestions,

// // //     field,

// // //     preview, // Add preview flag
// // //   } = req.body;

// // //   try {
// // //     // Generate questions using the generateQuestions function
// // //     const generatedQuestions = await generateFieldsFromOpenAI(
// // //       topic,
// // //       difficulty,
// // //       numberOfQuestions
// // //     );

// // //     if (generatedQuestions && generatedQuestions.length > 0) {
// // //       if (preview) {
// // //         // Return the generated questions for preview without saving
// // //         return res.status(200).json({
// // //           message: "Preview generated successfully",
// // //           questions: generatedQuestions,
// // //         });
// // //       } else {
// // //         // Proceed with creating a new ExamQuestion document if preview is not requested
// // //         const examQuestion = new GenQuestion({
// // //           fullname,
// // //           email,
// // //           topic,
// // //           difficulty,
// // //           numberOfQuestions,

// // //           field,

// // //           preview,
// // //           questions: generatedQuestions.map((q) => ({
// // //             questionText: q.questionText || q,
// // //             questionType: q.questionType || "short-answer",
// // //             options: q.options || [],
// // //             correctAnswer: q.correctAnswer || "",
// // //           })),
// // //           createdBy: req.user._id,
// // //         });

// // //         // Save the exam questions to the database
// // //         await examQuestion.save();

// // //         // Respond with the created exam question document
// // //         res.status(201).json({
// // //           message: "Exam questions generated and saved successfully",
// // //           examQuestion,
// // //         });
// // //       }
// // //     } else {
// // //       res.status(400).json({ error: "No questions generated" });
// // //     }
// // //   } catch (error) {
// // //     console.error("Error in generateQuestion:", error);
// // //     res
// // //       .status(500)
// // //       .json({ error: "An error occurred while generating questions" });
// // //   }
// // // };
// import { generateMultipleImages } from "../services/openaiService.js";
// import Dream from "../models/DreamModel.js";

// export const generateDream = async (req, res) => {
//   const { title, userId } = req.body;

//   if (!title) {
//     return res.status(400).json({ error: "Title is required" });
//   }

//   try {
//     const imageUrls = await generateMultipleImages(title, "1024x1024");

//     const dream = new Dream({
//       title,
//       content: `Images generated for: ${title}`,
//       imageUrls,
//       userId,
//     });

//     await dream.save(); // Save to the database

//     res.status(201).json({
//       message: "Dream generated successfully",
//       dream,
//     });
//   } catch (error) {
//     console.error("Error generating dream:", error);
//     res.status(500).json({ error: "Failed to generate dream images" });
//   }
// // };
// import { generateMultipleImages } from "../services/openaiService.js";
// import Dream from "../models/DreamModel.js";

// export const generateDream = async (req, res) => {
//   const { title, userId } = req.body;
//   let userImage = req.file ? req.file.location : null; // Get uploaded image URL

//   if (!title) {
//     return res.status(400).json({ error: "Title is required" });
//   }

//   try {
//     const imageUrls = await generateMultipleImages(
//       title,
//       "1024x1024",
//       userImage
//     );

//     const dream = new Dream({
//       title,
//       content: `Images generated for: ${title}`,
//       imageUrls,
//       userId,
//       userImage, // Store uploaded image
//     });

//     await dream.save(); // Save to the database

//     res.status(201).json({
//       message: "Dream generated successfully",
//       dream,
//     });
//   } catch (error) {
//     console.error("Error generating dream:", error);
//     res.status(500).json({ error: "Failed to generate dream images" });
//   }
// };

import { generateMultipleImages } from "../services/openaiService.js";
import Dream from "../models/DreamModel.js";

// export const generateDream = async (req, res) => {
//   const { title, userId } = req.body;
//   const { userImageUrl } = req.file ? req.file : {}; // Get uploaded user image URL

//   if (!title) {
//     return res.status(400).json({ error: "Title is required" });
//   }

//   try {
//     // Generate images with or without user image
//     const imageUrls = await generateMultipleImages(
//       title,
//       "1024x1024",
//       userImageUrl
//     );

//     // Save dream to database
//     const dream = new Dream({
//       title,
//       content: `Images generated for: ${title}`,
//       imageUrls,
//       userImageUrl, // Store the user image URL in the Dream document
//       userId,
//     });

//     await dream.save(); // Save dream to the database

//     res.status(201).json({
//       message: "Dream generated successfully",
//       dream,
//     });
//   } catch (error) {
//     console.error("Error generating dream:", error);
//     res.status(500).json({ error: "Failed to generate dream images" });
//   }
// };
export const generateDream = async (req, res) => {
  const { title, userId } = req.body;

  // Get the uploaded image URL from S3 (from the file key)
  const { location: userImageUrl } = req.file ? req.file : {}; // This gives you the S3 URL

  if (!title) {
    return res.status(400).json({ error: "Title is required" });
  }

  if (!userImageUrl) {
    return res.status(400).json({ error: "User image URL is required" });
  }

  try {
    // Generate images with or without user image
    const imageUrls = await generateMultipleImages(
      title,
      "1024x1024",
      userImageUrl
    );

    // Save dream to database
    const dream = new Dream({
      title,
      content: `Images generated for: ${title}`,
      imageUrls,
      userImageUrl, // Store the S3 URL in the Dream document
      userId,
    });

    await dream.save(); // Save dream to the database

    res.status(201).json({
      message: "Dream generated successfully",
      dream,
    });
  } catch (error) {
    console.error("Error generating dream:", error);
    res.status(500).json({ error: "Failed to generate dream images" });
  }
};
